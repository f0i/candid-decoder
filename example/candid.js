"use strict";(()=>{var M="abcdefghijklmnopqrstuvwxyz234567",U=Object.create(null);for(let t=0;t<M.length;t++)U[M[t]]=t;U[0]=U.o;U[1]=U.i;function ee(t){let e=0,n=0,r="";function i(o){return e<0?n|=o>>-e:n=o<<e&248,e>3?(e-=8,1):(e<4&&(r+=M[n>>3],e+=5),0)}for(let o=0;o<t.length;)o+=i(t[o]);return r+(e<0?M[n>>3]:"")}function te(t){let e=0,n=0,r=new Uint8Array(t.length*4/3|0),i=0;function o(_){let d=U[_.toLowerCase()];if(d===void 0)throw new Error(`Invalid character: ${JSON.stringify(_)}`);d<<=3,n|=d>>>e,e+=5,e>=8&&(r[i++]=n,e-=8,e>0?n=d<<5-e&255:n=0)}for(let _ of t)o(_);return r.slice(0,i)}var ge=new Uint32Array([0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117]);function ne(t){let e=new Uint8Array(t),n=-1;for(let r=0;r<e.length;r++){let o=(e[r]^n)&255;n=ge[o]^n>>>8}return(n^-1)>>>0}function be(t){return t instanceof Uint8Array||ArrayBuffer.isView(t)&&t.constructor.name==="Uint8Array"}function O(t,...e){if(!be(t))throw new Error("Uint8Array expected");if(e.length>0&&!e.includes(t.length))throw new Error("Uint8Array expected of length "+e+", got length="+t.length)}function J(t,e=!0){if(t.destroyed)throw new Error("Hash instance has been destroyed");if(e&&t.finished)throw new Error("Hash#digest() has already been called")}function re(t,e){O(t);let n=e.outputLen;if(t.length<n)throw new Error("digestInto() expects output buffer of length at least "+n)}function F(...t){for(let e=0;e<t.length;e++)t[e].fill(0)}function z(t){return new DataView(t.buffer,t.byteOffset,t.byteLength)}function I(t,e){return t<<32-e|t>>>e}function xe(t){if(typeof t!="string")throw new Error("string expected");return new Uint8Array(new TextEncoder().encode(t))}function Q(t){return typeof t=="string"&&(t=xe(t)),O(t),t}var T=class{};function se(t){let e=r=>t().update(Q(r)).digest(),n=t();return e.outputLen=n.outputLen,e.blockLen=n.blockLen,e.create=()=>t(),e}function ye(t,e,n,r){if(typeof t.setBigUint64=="function")return t.setBigUint64(e,n,r);let i=BigInt(32),o=BigInt(4294967295),_=Number(n>>i&o),d=Number(n&o),p=r?4:0,m=r?0:4;t.setUint32(e+p,_,r),t.setUint32(e+m,d,r)}function ie(t,e,n){return t&e^~t&n}function ae(t,e,n){return t&e^t&n^e&n}var V=class extends T{constructor(e,n,r,i){super(),this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.blockLen=e,this.outputLen=n,this.padOffset=r,this.isLE=i,this.buffer=new Uint8Array(e),this.view=z(this.buffer)}update(e){J(this),e=Q(e),O(e);let{view:n,buffer:r,blockLen:i}=this,o=e.length;for(let _=0;_<o;){let d=Math.min(i-this.pos,o-_);if(d===i){let p=z(e);for(;i<=o-_;_+=i)this.process(p,_);continue}r.set(e.subarray(_,_+d),this.pos),this.pos+=d,_+=d,this.pos===i&&(this.process(n,0),this.pos=0)}return this.length+=e.length,this.roundClean(),this}digestInto(e){J(this),re(e,this),this.finished=!0;let{buffer:n,view:r,blockLen:i,isLE:o}=this,{pos:_}=this;n[_++]=128,F(this.buffer.subarray(_)),this.padOffset>i-_&&(this.process(r,0),_=0);for(let u=_;u<i;u++)n[u]=0;ye(r,i-8,BigInt(this.length*8),o),this.process(r,0);let d=z(e),p=this.outputLen;if(p%4)throw new Error("_sha2: outputLen should be aligned to 32bit");let m=p/4,h=this.get();if(m>h.length)throw new Error("_sha2: outputLen bigger than state");for(let u=0;u<m;u++)d.setUint32(4*u,h[u],o)}digest(){let{buffer:e,outputLen:n}=this;this.digestInto(e);let r=e.slice(0,n);return this.destroy(),r}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());let{blockLen:n,buffer:r,length:i,finished:o,destroyed:_,pos:d}=this;return e.destroyed=_,e.finished=o,e.length=i,e.pos=d,i%n&&e.buffer.set(r),e}clone(){return this._cloneInto()}},B=Uint32Array.from([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),C=Uint32Array.from([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]);var ve=Uint32Array.from([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),N=new Uint32Array(64),P=class extends V{constructor(e=32){super(64,e,8,!1),this.A=B[0]|0,this.B=B[1]|0,this.C=B[2]|0,this.D=B[3]|0,this.E=B[4]|0,this.F=B[5]|0,this.G=B[6]|0,this.H=B[7]|0}get(){let{A:e,B:n,C:r,D:i,E:o,F:_,G:d,H:p}=this;return[e,n,r,i,o,_,d,p]}set(e,n,r,i,o,_,d,p){this.A=e|0,this.B=n|0,this.C=r|0,this.D=i|0,this.E=o|0,this.F=_|0,this.G=d|0,this.H=p|0}process(e,n){for(let u=0;u<16;u++,n+=4)N[u]=e.getUint32(n,!1);for(let u=16;u<64;u++){let v=N[u-15],k=N[u-2],S=I(v,7)^I(v,18)^v>>>3,A=I(k,17)^I(k,19)^k>>>10;N[u]=A+N[u-7]+S+N[u-16]|0}let{A:r,B:i,C:o,D:_,E:d,F:p,G:m,H:h}=this;for(let u=0;u<64;u++){let v=I(d,6)^I(d,11)^I(d,25),k=h+v+ie(d,p,m)+ve[u]+N[u]|0,A=(I(r,2)^I(r,13)^I(r,22))+ae(r,i,o)|0;h=m,m=p,p=d,d=_+k|0,_=o,o=i,i=r,r=k+A|0}r=r+this.A|0,i=i+this.B|0,o=o+this.C|0,_=_+this.D|0,d=d+this.E|0,p=p+this.F|0,m=m+this.G|0,h=h+this.H|0,this.set(r,i,o,_,d,p,m,h)}roundClean(){F(N)}destroy(){this.set(0,0,0,0,0,0,0,0),F(this.buffer)}},$=class extends P{constructor(){super(28),this.A=C[0]|0,this.B=C[1]|0,this.C=C[2]|0,this.D=C[3]|0,this.E=C[4]|0,this.F=C[5]|0,this.G=C[6]|0,this.H=C[7]|0}};var oe=se(()=>new $);var _e=oe;function ce(t){return _e.create().update(new Uint8Array(t)).digest()}var j="__principal__",we=2,de=4,ke="aaaaa-aa",Ae=t=>{var e;return new Uint8Array(((e=t.match(/.{1,2}/g))!==null&&e!==void 0?e:[]).map(n=>parseInt(n,16)))},Ee=t=>t.reduce((e,n)=>e+n.toString(16).padStart(2,"0"),""),G=class t{constructor(e){this._arr=e,this._isPrincipal=!0}static anonymous(){return new this(new Uint8Array([de]))}static managementCanister(){return this.fromText(ke)}static selfAuthenticating(e){let n=ce(e);return new this(new Uint8Array([...n,we]))}static from(e){if(typeof e=="string")return t.fromText(e);if(Object.getPrototypeOf(e)===Uint8Array.prototype)return new t(e);if(typeof e=="object"&&e!==null&&e._isPrincipal===!0)return new t(e._arr);throw new Error(`Impossible to convert ${JSON.stringify(e)} to Principal.`)}static fromHex(e){return new this(Ae(e))}static fromText(e){let n=e;if(e.includes(j)){let _=JSON.parse(e);j in _&&(n=_[j])}let r=n.toLowerCase().replace(/-/g,""),i=te(r);i=i.slice(4,i.length);let o=new this(i);if(o.toText()!==n)throw new Error(`Principal "${o.toText()}" does not have a valid checksum (original value "${n}" may not be a valid Principal ID).`);return o}static fromUint8Array(e){return new this(e)}isAnonymous(){return this._arr.byteLength===1&&this._arr[0]===de}toUint8Array(){return this._arr}toHex(){return Ee(this._arr).toUpperCase()}toText(){let e=new ArrayBuffer(4);new DataView(e).setUint32(0,ne(this._arr));let r=new Uint8Array(e),i=Uint8Array.from(this._arr),o=new Uint8Array([...r,...i]),d=ee(o).match(/.{1,5}/g);if(!d)throw new Error;return d.join("-")}toString(){return this.toText()}toJSON(){return{[j]:this.toText()}}compareTo(e){for(let n=0;n<Math.min(this._arr.length,e._arr.length);n++){if(this._arr[n]<e._arr[n])return"lt";if(this._arr[n]>e._arr[n])return"gt"}return this._arr.length<e._arr.length?"lt":this._arr.length>e._arr.length?"gt":"eq"}ltEq(e){let n=this.compareTo(e);return n=="lt"||n=="eq"}gtEq(e){let n=this.compareTo(e);return n=="gt"||n=="eq"}};var x=class extends Error{constructor(e,n){super(e),this.index=n,this.name="CandidError"}},X=class{constructor(e){this.buffer=e,this.offset=0,this.dataView=new DataView(e.buffer,e.byteOffset,e.byteLength)}hasMore(){return this.offset<this.buffer.length}readByte(){if(!this.hasMore())throw new x("Unexpected end of buffer when reading a single byte.",this.offset);let e=this.buffer[this.offset];return this.offset++,e}readBytes(e){if(this.offset+e>this.buffer.length)throw new x(`Not enough bytes to read. Expected ${e}, but only ${this.buffer.length-this.offset} available.`,this.offset);let n=this.buffer.slice(this.offset,this.offset+e);return this.offset+=e,n}readULEB128(){let e=0n,n=0n,r;do r=this.readByte(),e|=(BigInt(r)&0x7fn)<<n,n+=7n;while((r&128)!==0);return e}readSLEB128(){let e=0n,n=0n,r;do r=this.readByte(),e|=(BigInt(r)&0x7fn)<<n,n+=7n;while((r&128)!==0);return(r&64)!==0&&n<64n&&(e|=~0n<<n),e}readUtf8String(e){let n=this.readBytes(e);return new TextDecoder("utf-8",{fatal:!0}).decode(n)}readLittleEndian(e,n=!1){if(this.offset+e>this.buffer.length)throw new x(`Not enough bytes for ${e}-byte number (little-endian)`,this.offset);let r=0n;for(let i=0;i<e;i++)r|=BigInt(this.buffer[this.offset+i])<<BigInt(8*i);if(this.offset+=e,n){let i=1n<<BigInt(e*8-1);(r&i)!==0n&&(r=r-(1n<<BigInt(e*8)))}return r}readFloat(e){if(this.offset+e>this.buffer.length)throw new x(`Not enough bytes for Float${e*8}`,this.offset);let n;return e===4?n=this.dataView.getFloat32(this.offset,!0):n=this.dataView.getFloat64(this.offset,!0),this.offset+=e,n}getCurrentOffset(){return this.offset}},l;(function(t){t[t.Null=-1]="Null",t[t.Bool=-2]="Bool",t[t.Nat=-3]="Nat",t[t.Int=-4]="Int",t[t.Nat8=-5]="Nat8",t[t.Nat16=-6]="Nat16",t[t.Nat32=-7]="Nat32",t[t.Nat64=-8]="Nat64",t[t.Int8=-9]="Int8",t[t.Int16=-10]="Int16",t[t.Int32=-11]="Int32",t[t.Int64=-12]="Int64",t[t.Float32=-13]="Float32",t[t.Float64=-14]="Float64",t[t.Text=-15]="Text",t[t.Reserved=-16]="Reserved",t[t.Empty=-17]="Empty",t[t.Opt=-18]="Opt",t[t.Vec=-19]="Vec",t[t.Record=-20]="Record",t[t.Variant=-21]="Variant",t[t.Func=-22]="Func",t[t.Service=-23]="Service",t[t.Principal=-24]="Principal"})(l||(l={}));function ue(t){let e={};for(let n of t){let r=Se(n);e[r]?(e[r]+=`|${n}`,console.warn("Hash collision or duplicate between field names:",e[r])):e[r]=n}return e}function Se(t){let e=new TextEncoder().encode(t),n=223,r=2**32,i=0;for(let o=0;o<e.length;o++){let _=e[o];i=(i*n+_)%r}return i}function pe(t,e){let n=new X(t),r=null,i=null,o=null,_=[];try{let d=n.readBytes(4);if(d[0]!==68||d[1]!==73||d[2]!==68||d[3]!==76)throw new x("Invalid Candid magic bytes. Expected 'DIDL'.",0);let p=n.readULEB128();for(let v=0;v<p;v++){let k=n.getCurrentOffset(),S=n.readSLEB128(),A;switch(Number(S)){case l.Opt:let R=n.readSLEB128();A={tag:l.Opt,innerTypeIdx:R};break;case l.Vec:let q=n.readSLEB128();A={tag:l.Vec,elementTypeIdx:q};break;case l.Record:let L=n.readULEB128(),c=[];for(let b=0;b<L;b++){let E=n.readULEB128(),D=n.readSLEB128();c.push({id:E,typeIdx:D})}c.sort((b,E)=>Number(b.id-E.id)),A={tag:l.Record,fields:c};break;case l.Variant:let s=n.readULEB128(),a=[];for(let b=0;b<s;b++){let E=n.readULEB128(),D=n.readSLEB128();a.push({id:E,typeIdx:D})}a.sort((b,E)=>Number(b.id-E.id)),A={tag:l.Variant,options:a};break;case l.Func:let f=n.readULEB128(),y=[];for(let b=0;b<f;b++)y.push(n.readSLEB128());let g=n.readULEB128(),w=[];for(let b=0;b<g;b++)w.push(n.readSLEB128());let W=n.readULEB128(),K=[];for(let b=0;b<W;b++){let E=n.readByte();if(E===1)K.push("oneway");else if(E===2)K.push("query");else throw new x(`Invalid function mode byte: ${E}. Expected 1 or 2.`,n.getCurrentOffset()-1)}A={tag:l.Func,argTypeIdxs:y,retTypeIdxs:w,modes:K};break;case l.Service:let me=n.readULEB128(),Z=[];for(let b=0;b<me;b++){let E=Number(n.readULEB128()),D=n.readUtf8String(E),he=n.readSLEB128();Z.push({name:D,funcTypeIdx:he})}A={tag:l.Service,methods:Z};break;default:throw new x(`Unexpected type code (${S}) in type table definition at index ${v}.`,k)}_.push(A)}let m=n.readULEB128(),h=[];for(let v=0;v<m;v++){let k=n.readSLEB128(),S=Number(k);if(S===l.Service||S===l.Func)throw new x(`Reference type ${S} cannot be used directly as an argument. It must be in the type table.`,n.getCurrentOffset()-1);h.push(k)}let u=[];for(let v=0;v<h.length;v++){let k=h[v];u.push(H(n,k,_,e))}if(n.hasMore())throw new x("Trailing bytes found after decoding all expected values.",n.getCurrentOffset());return r=u,{ok:r}}catch(d){return d instanceof x?(i=d.message,o=d.index):d instanceof Error?(i=`An unexpected JavaScript error occurred: ${d.message}`,o=n.getCurrentOffset()):(i="An unknown error occurred during decoding.",o=n.getCurrentOffset()),{error:{msg:i,index:o,data:r!==null?r:void 0}}}}function le(t){let e=t.readByte();if(e!==1)throw new x(`Unsupported principal tag: ${e}. Expected 1.`,t.getCurrentOffset()-1);let n=Number(t.readULEB128());if(n>29)throw new x(`Invalid principal length: ${n}. Must be at most 29 bytes.`,t.getCurrentOffset()-1);let r=t.readBytes(n);return G.fromUint8Array(r)}function H(t,e,n,r){let i,o;if(e>=0){if(e>=n.length)throw new x(`Type index ${e} is out of bounds for type table of size ${n.length}.`,t.getCurrentOffset());o=n[Number(e)],i=Number(o.tag)}else i=Number(e);switch(i){case l.Null:return null;case l.Bool:let _=t.readByte();if(_===0)return!1;if(_===1)return!0;throw new x(`Invalid boolean value: ${_}. Expected 0 (false) or 1 (true).`,t.getCurrentOffset()-1);case l.Nat:return t.readULEB128();case l.Int:return t.readSLEB128();case l.Nat8:return t.readByte();case l.Nat16:return Number(t.readLittleEndian(2,!1));case l.Nat32:return Number(t.readLittleEndian(4,!1));case l.Nat64:return t.readLittleEndian(8,!1);case l.Int8:return Number(t.readLittleEndian(1,!0));case l.Int16:return Number(t.readLittleEndian(2,!0));case l.Int32:return Number(t.readLittleEndian(4,!0));case l.Int64:return t.readLittleEndian(8,!0);case l.Float32:return t.readFloat(4);case l.Float64:return t.readFloat(8);case l.Text:let d=Number(t.readULEB128());return t.readUtf8String(d);case l.Reserved:return null;case l.Empty:throw new x("Attempted to decode 'empty' type as a value. This type has no encoded form.",t.getCurrentOffset());case l.Principal:case l.Service:return le(t);case l.Opt:{let p=o,m=t.readByte();if(m===0)return[];if(m===1)return[H(t,p.innerTypeIdx,n,r)];throw new x(`Invalid option tag: ${m}. Expected 0 or 1.`,t.getCurrentOffset()-1)}case l.Vec:{let p=o,m=Number(t.readULEB128()),h=[];for(let u=0;u<m;u++)h.push(H(t,p.elementTypeIdx,n,r));return h}case l.Record:{let p=o,m={};for(let h of p.fields){let u=r?.[Number(h.id)]||`_${h.id.toString()}`;m[u]=H(t,h.typeIdx,n,r)}return m}case l.Variant:{let p=o,m=Number(t.readULEB128());if(m>=p.options.length)throw new x(`Variant option index ${m} out of bounds. Variant has ${p.options.length} options.`,t.getCurrentOffset()-1);let h=p.options[m],u=H(t,h.typeIdx,n,r);return{[r?.[Number(h.id)]||`_${h.id.toString()}`]:u}}case l.Func:{let p=t.readByte();if(p!==1)throw new x(`Unsupported function tag: ${p}. Expected 1 for reference type.`,t.getCurrentOffset()-1);let m=le(t),h=Number(t.readULEB128()),u=t.readUtf8String(h);return[m,u]}default:throw new x(`Unsupported or unknown Candid type tag: ${i} (resolved from index ${e}).`,t.getCurrentOffset())}}var Ie=["Aborted","AcceptedDeposit","AcceptedErc20Deposit","AcceptedErc20WithdrawalRequest","AcceptedEthWithdrawalRequest","AccessDenied","AddErc20Arg","AddGenericNervousSystemFunction","AddHotKey","AddNeuronPermission","AddNeuronPermissions","AddOrRemoveNodeProvider","AddedCkErc20Token","AddressAdded","AddressRemoved","AdvanceSnsTargetVersion","AllowanceChanged","AllowedPrincipals","AmountTooLow","AnonymousPrincipalNotAllowed","Approve","ApproveGenesisKyc","Array","AuthenticationFailed","BadBurn","BadFee","BadFirstBlockIndex","BehindTargetVersion","Blob","BlobContent","Burn","ByRecipient","BySenderAccount","ByWithdrawalId","Callback","Called","Canister","CanisterCalled","CanisterCreated","CanisterError","ChangeAutoStakeMaturity","CheckCaptcha","Checked","CkErc20","CkErc20LedgerError","CkEth","CkEthLedgerError","ClaimOrRefresh","ClaimOrRefreshNeuron","Clear","Committed","CommunityFund","Configure","Confirmed","ConsentMessageUnavailable","CreateAsset","CreateServiceNervousSystem","Created","CreatedInFuture","CreatedTransaction","CryptoBaseAssetNotFound","CryptoQuoteAssetNotFound","CyclesReceived","CyclesSent","DeleteAsset","DeployedSns","DepositsRestrictedTo","DeregisterDappCanisters","Direct","Disburse","DisburseMaturity","DisburseToNeuron","DissolveDelaySeconds","Duplicate","Dynamic","Err","Error","ExchangeRate","ExecuteGenericNervousSystemFunction","ExecuteNnsFunction","Expired","ExternalFailure","Failed","FailedErc20WithdrawalRequest","FailedToAcceptCycles","Filter","FinalizeDisburseMaturity","FinalizedTransaction","Follow","ForexAssetsNotFound","ForexBaseAssetNotFound","ForexInvalidTimestamp","ForexQuoteAssetNotFound","FractionalDeveloperVotingPower","GenericDisplayMessage","GenericError","GenericNervousSystemFunction","Hash","Image","IncidentIdNotFound","IncidentIds","InconsistentRatesReceived","IncreaseDissolveDelay","Init","InitArg","InstallCode","Installed","InsufficientAllowance","InsufficientFunds","InsufficientPayment","Int","Internal","InternalCanisterError","InvalidAuthnMethod","InvalidDeposit","InvalidIdAlias","InvalidInputConfig","InvalidMetadata","InvalidState","InvalidTransaction","InvalidTransactionId","InvalidUuidFormat","JoinCommunityFund","LastNeuronId","LeaveCommunityFund","LineDisplay","LineDisplayMessage","MakeProposal","MalformedAddress","ManageDappCanisterSettings","ManageLedgerParameters","ManageNervousSystemParameters","ManageNetworkEconomics","ManageNeuron","ManageSnsMetadata","Map","Memo","MemoAndController","Merge","MergeMaturity","MinConfirmations","Mint","MintSnsTokens","Minted","MintedCkErc20","MintedCkEth","Motion","NameError","Nat","Nat16Content","Nat32Content","Nat64","Nat64Content","Nat8Content","NatContent","NativeNervousSystemFunction","Neuron","NeuronId","NeuronIdOrSubaccount","NeuronsFund","NoNewUtxos","NoSuchCredentials","Node","NotEnoughCycles","Number","Ok","OpenSnsTokenSwap","Other","Page","Pending","PendingReimbursement","Plausible","PolicyViolation","Proposal","PubKey","QuarantinedDeposit","QuarantinedReimbursement","RateLimited","RecipientAddressBlocked","Redirect","RefreshVotingPower","Refunded","RegisterDappCanisters","RegisterKnownNeuron","RegisterVote","Reimbursed","ReimbursedErc20Withdrawal","ReimbursedEthWithdrawal","RemoveGenericNervousSystemFunction","RemoveHotKey","RemoveNeuronPermission","RemoveNeuronPermissions","ReplacedTransaction","ResponseTooLarge","RestrictedTo","Retriable","RewardNodeProvider","RewardNodeProviders","RewardToAccount","RewardToNeuron","RuleIdNotFound","RuleIds","Send","Sending","Set","SetApprovalForAll","SetAsset","SetAssetContent","SetAssetProperties","SetDefaultFollowees","SetDissolveTimestamp","SetFollowing","SetSnsTokenSwapOpenTimeWindow","SetTopicsForCustomProposals","SetVisibility","SignatureNotFound","SignedTransaction","SkippedBlock","Spawn","Split","StablecoinRateNotFound","StablecoinRateTooFewRates","StablecoinRateZeroRate","StakeMaturity","StartDissolving","State","Static","StopDissolving","StopOrStartCanister","StorageError","StorageSpaceExceeded","Subaccount","Submitted","Subnet","Success","SyncCommand","SyncedDepositWithSubaccountToBlock","SyncedErc20ToBlock","SyncedToBlock","Tainted","TaintedDestination","TargetVersionReset","TargetVersionSet","TemporarilyUnavailable","Text","TextContent","Timeout","ToAdd","ToRemove","TokenNotSupported","TransactionTooOld","Transfer","TransferFrom","TransferSnsTreasuryFunds","TransientInternalError","Trap","TxCreatedInFuture","TxDuplicate","TxFinalized","TxIdBin","TxIdStr","TxSent","TxTooOld","Unauthorized","UnauthorizedSubject","UnexpectedCall","UnexpectedError","Unknown","UnknownSubject","UnsetAsset","UnsetAssetContent","Unspecified","UnsupportedCanisterCall","UnsupportedCredentialSpec","UnsupportedOrigin","UpdateCanisterSettings","Upgrade","UpgradeArg","UpgradeOutcome","UpgradeSnsControlledCanister","UpgradeSnsToNextVersion","UpgradeSnsToNextVersionProposal","UpgradeStarted","UpgradeStepsRefreshed","UpgradeStepsReset","ValueTooSmall","WalletDeployed","WebAuthn","WhenDissolvedTimestampSeconds","WillReimburse","WrongCode","WrongSolution","accept_encodings","accepted_retrieve_btc_request","access_controls_enabled","access_list","access_point","access_points","account","account_balance","account_balance_dfx","account_creation_paused","account_identifier","account_identifier_to_disburse_to","account_to_disburse_to","accounts","accounts_overflow_trim_quantity","acknowledge_entries","action","action_auxiliary","active_since","actual_timestamp_seconds","actual_update_mock_query_remote_candid_update","add","addAllowedPrincipal","addMod","addToEmailQueue","addUser","add_address","add_adult","add_api_boundary_nodes","add_ckerc20_token","add_config","add_controller","add_device","add_email_and_principal_for_create_account_validation","add_employee","add_firewall_rules","add_gradient","add_graduate","add_kp","add_logo","add_maturity","add_nns_canister","add_node","add_node_operator","add_nodes_to_subnet","add_note","add_openid_credential","add_or_remove_data_centers","add_tentative_device","add_transparency","add_user","add_wasm","added_in_version","added_principals","added_tentatively","additional_dissolve_delay_seconds","address","advance_target_version","age_seconds","aging_since_timestamp_seconds","airdrop_distribution","airdrop_neurons","alerts","alg","algorithm","alias","allocated_neurons_fund_participation_icp_e8s","allow_raw_access","allowance","allowance_e8s","allowed_principals","allowed_viewers","already_tried_to_auto_finalize","amInitializer","amount","amount_deducted_e8s","amount_disbursed_e8s","amount_e8s","amount_icp_e8s","amount_in_satoshi","amount_threshold","amount_to_be_disbursed_e8s","amount_transferred_e8s","analytics_config","analyzeCount","anchor","anchor_number","api_host","api_key","api_version","append_blocks","approve","approveDip721","approve_transaction","approves","archive_canister","archive_canister_ids","archive_compressed_wasm_hash","archive_config","archive_info","archive_options","archive_wasm_hash","archived_blocks","archived_transactions","archives","arg","arg_hash","arg_size","args","argument","arguments","assigned_user_number_range","at_timestamp","at_version","attached_cycles","aud","authenticated_principal_id","authnMethod","authn_method","authn_method_add","authn_method_confirm","authn_method_metadata_replace","authn_method_register","authn_method_registration","authn_method_registration_mode_enter","authn_method_registration_mode_exit","authn_method_remove","authn_method_replace","authn_method_security_settings_replace","authn_methods","authorize","authorized_principal","auto_finalize_swap_response","auto_stake_maturity","automatically_advance_target_version","aux","avg","bab","backend_canister_id","backup_canister_id","balance","balanceOfDip721","ballots","bar","base64_encoding","base_asset","base_asset_num_queried_sources","base_asset_num_received_rates","basic_entity","basis_points","batch_id","baz","before_proposal","binding","bip341","bitcoin_get_balance","bitcoin_get_balance_query","bitcoin_get_current_fee_percentiles","bitcoin_get_utxos","bitcoin_get_utxos_query","bitcoin_send_transaction","blob_len","block_hash","block_headers","block_height","block_index","block_number","block_range_end","block_range_start","blocks","body","bottom","branch","browser","btc_checker_principal","btc_network","buf_size","burn","burnDip721","burn_block_index","burn_in_block","buyer","buyer_principal","buyer_state","buyer_total_icp_e8s","buyers","buyers_total","by","c","cached_daily_maturity_modulation_basis_points","cached_neuron_stake_e8s","cached_upgrade_steps","call_errors","call_info","call_with_large_blob","callback","caller","calls","cancelOrder","canister","canisterCycles","canisterHeapMemorySize","canisterMemorySize","canister_controllers","canister_creation_cycles_cost","canister_deployment_chain","canister_http","canister_http_with_transform","canister_id","canister_id_ranges","canister_ids","canister_info","canister_log","canister_module_hash","canister_sandboxing","canister_sig_pk_der","canister_status","canister_to_subnet_rate","canister_type","canister_upgrade_arg","canister_version","canisters","canisters_number","canisters_per_batch","captcha_config","captcha_create","captcha_png_base64","captcha_trigger","cast_timestamp_seconds","category","cert","certificate","certificate_version","certified_tree","cf_neuron_count","cf_neurons","cf_participant_count","cf_participants","chain_code","chain_id","chain_key_config","chain_key_signing_disable","chain_key_signing_enable","chain_length","challenge_key","change","change_archive_options","change_availability","change_canister","change_canister_controllers","change_canister_controllers_result","change_fee_collector","change_nns_canister","change_output","change_state","change_subnet_membership","characters_per_line","chars","checkEmail","check_address","check_captcha","check_fee","check_mode","check_transaction","check_transaction_query","check_transaction_str","checked_utxo","checked_utxo_mint_unknown","checked_utxo_v2","checking_upgrade_lock","child_certificate","chip_id","chunk","chunk_hashes_list","chunk_ids","chunked_canister_wasm","ckerc20_block_index","ckerc20_ledger_burn_index","ckerc20_ledger_id","ckerc20_token_symbol","cketh_block_index","cketh_ledger_burn_index","cketh_ledger_id","claim","claim_gtc_neurons","claim_neuron_result","claim_neurons","claim_or_refresh_neuron_from_account","claim_swap_neurons","claim_swap_neurons_result","claimed","claimed_status","class","clean","clean_memory","clear","clear_chunk_store","clear_following_after_seconds","clear_provisional_whitelist","client_id","code","code_deployment","coefficient_intervals","cols","combine","command","comment","commit","commit_batch","commit_hash","commit_proposed_batch","committee_signing_pk","community_fund_investment_e8s","community_fund_total_maturity_e8s_equivalent","community_fund_total_staked_e8s","complete_canister_migration","compute_allocation","compute_evidence","compute_sum","config","configure","confirmation_code","confirmation_text","confirmations","confirmed_transaction","consent_message","content","content_encoding","content_sha256","content_type","contents","context","contract","contract_address","contribution_threshold_xdr","controller","controller_id","controller_principal_ids","controllers","controllers_change","controllers_number","copy_inactive_neurons_to_stable_memory_migration","count","count_anchors","count_buckets","count_icrc1_canisters","create","createGiftCard","createRegistration","create_access_point","create_account","create_and_validate_anonymous_http_with_ingress_expiry_time","create_array","create_asset","create_batch","create_canister","create_challenge","create_chunk","create_chunks","create_error","create_note","create_sns_neuron_recipes_result","create_subnet","create_token","created","created_at","created_at_time","created_date","created_neuron_id","created_timestamp_seconds","creation","creation_time","creator","credential_id","credential_jws","credential_spec","credential_type","credentials","credit","currency","current","current_basis_points","current_confirmations","current_deadline_timestamp_seconds","current_rate_sampling_interval_s","current_total_stake_e8s","current_version","cursor","custodians","custom_function_id_to_topic","custom_functions","cycles","cycles_for_archive_creation","cycles_for_index_creation","cycles_for_ledger_creation","cycles_ledger_canister_id","cycles_management","cycles_top_up_increment","d","daily","dance","dapp_canister_id","dapp_canister_ids","dapp_canister_summaries","dapp_canisters","dapp_canisters_transfer_result","dapps","data","data_centers_to_add","data_centers_to_remove","dateFromMillis","dateToMillis","date_added","date_filter","day_after_genesis","dc_id","deadline_timestamp_seconds","deauthorize","decentralization_sale_open_timestamp_seconds","decentralization_swap_termination_timestamp_seconds","decided_timestamp_seconds","deciding_voting_power","deciding_voting_power_buckets","decimals","declining_voting_power_neuron_subset_metrics","decrement","default_followees","delegation","delegations","delete","deleteUser","delete_asset","delete_batch","delete_canister","delete_note","delete_token","deploy_archive","deploy_guestos_to_all_subnet_nodes","deploy_guestos_to_all_unassigned_nodes","deploy_guestos_to_some_api_boundary_nodes","deploy_hostos_to_some_nodes","deploy_new_sns","deployed_version","deployment_chain","deposit","deposit_cycles","deposit_memo","deposit_with_subaccount_helper_contract_address","derivation_origin","derivation_path","derivation_paths","derived","derived_proposal_information","desc","description","design","destination","destination_address","destination_subnet","details","developer_distribution","developer_neurons","device","device_registration","device_registration_timeout","device_spec","device_type","devices","did_to_js","direct_participant_count","direct_participation_icp_e8s","direction","disburse_maturity_in_progress","disclose_rules","disclosed_at","dispenseTask","dissolve_delay","dissolve_delay_interval","dissolve_delay_interval_seconds","dissolve_delay_seconds","dissolve_state","dissolve_timestamp_seconds","dissolved_neurons_count","dissolved_neurons_e8s","dissolving_neurons_count","dissolving_neurons_count_buckets","dissolving_neurons_e8s_buckets","dissolving_neurons_e8s_buckets_ect","dissolving_neurons_e8s_buckets_seed","dissolving_neurons_staked_maturity_e8s_equivalent_buckets","dissolving_neurons_staked_maturity_e8s_equivalent_sum","distributed_e8s_equivalent","distributed_kyt_fee","dkg_dealings_per_block","dkg_interval_length","do_stuff","domain","donate_account","duration","duration_sec","e","e8s","earliest_retry","ecdsa_config","ecdsa_key","ecdsa_key_name","ecdsa_key_signing_disable","ecdsa_key_signing_enable","ecdsa_public_key","economics","ect_neuron_count","effective_gas_price","effective_transaction_fee","eip_1559_transaction_price","elected_replica_version","email","email_address","email_notifications","emotion","enable_aliasing","encode","encodings","encrypted_key","encrypted_symmetric_key_for_note","encrypted_text","end","end_time","end_timestamp_seconds","enter_device_registration_mode","entries","entries_buffer_limit","entries_fetch_limit","entry","env","erc20_balances","erc20_contract","erc20_contract_address","erc20_helper_contract_address","err","error","error_buffer_limit","error_code","error_message","error_refund_icp","error_text","error_type","errors","estimate_withdrawal_fee","eth_balance","eth_helper_contract_address","ethereum_address","ethereum_block_height","ethereum_contract_address","ethereum_network","event","event_aggregations","event_source","evidence","evm_rpc_id","exchange_rate_canister","exclude_topic","exclude_type","execute_many_instructions","executed_timestamp_seconds","existing_optional_request_field","existing_optional_response_field","existing_required_request_field","existing_required_response_field","existing_ticket","exit_device_registration_mode","expand_state","expected_allowance","expected_hash","expected_version","expiration","expireAt","expireIn","expires_at","explode","exportCertificates","exportCertificatesCertified","exportCertificatesPaginated","exposure_type","external_id","f","fail_stuck_upgrade_in_progress","failed","failed_timestamp_seconds","failed_transferred_neurons","failed_updates","failure","failure_reason","fallback_controller_principal_ids","feature_flags","features","fee","fee_collector_account","fetchGoogleKeys","fetch_entries","fetch_utxo_alerts","fetch_withdrawal_alerts","field","fieldnat","filter","final_neurons_fund_participation","final_reward_rate","final_reward_rate_basis_points","finalize_disbursement_timestamp_seconds","finalize_swap","finalize_swap_in_progress","find","firewall_config","first","firstTimeNanos","first_block_index","first_index","first_valid_index","followees","followers","followers_map","foo","forex_timestamp","forward_whitelisted_unclaimed_accounts","freezing_threshold","from","fromAmount","fromCall","fromQuery","fromTimeNanos","from_account","from_address","from_canister","from_ckerc20_subaccount","from_cketh_subaccount","from_direct_participation_icp_e8s","from_subaccount","from_treasury","from_user","frontend_hostname","full_neurons","full_participation_milestone_xdr","fully_lost_voting_power_neuron_subset_metrics","function","function_id","function_type","functions","g","garbage_collectable_neurons_count","gas_limit","gas_used","gateway_ip_addr","generate","genesis_timestamp_seconds","get","getAllBalances","getApprovedDip721","getBalance","getBalances","getCanisterId","getCertificate","getCount","getDelegation","getDepositAddress","getEmail","getEmailQueue","getInventory","getLatestMessages","getLogs","getMerchant","getMessages","getMetadataDip721","getMetdataForUserDip721","getOrder","getOrders","getPrincipal","getRegistration","getSchema","getStats","getSymbol","getVersion","get_account","get_account_by_anchor","get_account_by_principal","get_account_identifier_balance","get_account_identifier_transactions","get_account_transactions","get_all_accounts_json","get_all_icrc1_canisters","get_all_json","get_allowed_principals","get_anchor_credentials","get_anchor_entries","get_anchor_info","get_api_boundary_node_ids","get_asset_properties","get_auto_finalization_status","get_balance","get_blocks","get_btc_address","get_build_metadata","get_buyer_state","get_buyers_total","get_canister_status","get_canisters_by_root","get_chart","get_chunk","get_ciphertext","get_config","get_configuration","get_controllers","get_credential","get_custodians","get_data_certificate","get_default_subnets","get_delegation","get_deployed_sns_by_proposal_id","get_deployed_sns_by_proposal_id_result","get_deposit_fee","get_derived_state","get_devices","get_encoded_blocks","get_entries","get_events","get_events128","get_executed_functions_order","get_fee_collectors_ranges","get_full_neuron","get_full_neuron_by_id_or_subaccount","get_icp_xdr_conversion_rate","get_icrc1_paginated","get_id","get_id_alias","get_init","get_integer","get_known_utxos","get_kp","get_kp_certified","get_latest_reward_event","get_latest_sns_version_pretty","get_lifecycle","get_managed_canister_events","get_managed_canister_events128","get_maturity_modulation","get_mempool","get_metadata","get_metrics","get_metrics_result","get_minter_info","get_mode","get_monthly_node_provider_rewards","get_most_recent_monthly_node_provider_rewards","get_nervous_system_parameters","get_network_economics_parameters","get_neuron","get_neuron_ids","get_neuron_info","get_neuron_info_by_id_or_subaccount","get_neurons_fund_audit_info","get_next_sns_version","get_node_operators_and_dcs_of_node_provider","get_node_provider_by_caller","get_node_providers_monthly_xdr_rewards","get_notes","get_open_ticket","get_orchestrator_info","get_passkey","get_passkey_by_anchor","get_pending_proposals","get_policies","get_principal","get_principals_authorized_to_create_canisters_to_subnets","get_proposal","get_proposal_id_that_added_wasm","get_proposal_info","get_public_key","get_remaining_size_after_rebuild_device_index_slice_from_temp_stack","get_restore_aging_summary","get_root_canister_status","get_root_certified","get_rule_by_id","get_rules_by_incident_id","get_running_sns_version","get_sale_parameters","get_salt","get_sns_canisters_summary","get_sns_initialization_parameters","get_sns_subnet_ids","get_state","get_subnet_for_canister","get_subnet_types_to_subnets","get_system_params","get_timers","get_transaction","get_transactions","get_trusted_origins","get_trusted_origins_certified","get_tvl","get_unsynced_pubkeys","get_upgrade_journal","get_utxos_cache_expiration_seconds","get_vaults","get_vaults_by_address","get_wallets","get_wasm","get_wasm_metadata","get_withdrawal_account","gift","git_branch","git_commit_hash","global_failures","gossip_max_artifact_streams_per_peer","gossip_max_chunk_size","gossip_max_chunk_wait_ms","gossip_max_duplicity","gossip_pfn_evaluation_period_ms","gossip_receive_check_cache_size","gossip_registry_poll_period_ms","gossip_retransmission_request_ms","governance","governance_canister_id","governance_canister_summary","governance_error","governance_id","governance_parameters","governance_wasm_hash","gps","grant_permission","granularity","greet","greet_no_consent","greet_update_call","greeting","group_type","groups","guest_launch_measurement_sha256_hex","h","halt_at_cup_height","hard_reset_root_to_version","has_auto_finalize_been_attempted","has_claimed","has_created_neuron_recipes","has_donated","has_forwarded","hash","hash_mode","hash_tree","header","headers","headers_number","heartbeat","height","hostos_version_id","hostos_version_to_elect","hostos_versions_to_unelect","hot_key_to_remove","hot_keys","hotkey","hotkey_principal","hotkeys","hourly","http_endpoint","http_request","http_request_streaming_callback","http_request_update","http_requests","http_streaming","human_readable","ic0_trap","ic_root_key_der","icon","icp","icp_accepted_participation_e8s","icp_ledger_account_balance_e8s","icp_ledger_canister_id","icps_per_token","icpts","icrc103_get_allowances","icrc106_get_index_principal","icrc10_supported_standards","icrc1_balance_of","icrc1_decimals","icrc1_fee","icrc1_memo","icrc1_metadata","icrc1_minting_account","icrc1_name","icrc1_supported_standards","icrc1_symbol","icrc1_token_symbol","icrc1_total_supply","icrc1_transfer","icrc2","icrc21_canister_call_consent_message","icrc28_trusted_origins","icrc2_allowance","icrc2_approve","icrc2_transfer_from","icrc3_get_archives","icrc3_get_blocks","icrc3_get_tip_certificate","icrc3_supported_block_types","id","idSeed","id_alias","id_dapp","id_to_nervous_system_functions","ideal_matched_participation_function","identity_authn_info","identity_info","identity_metadata_replace","identity_number","identity_register","identity_registration_finish","identity_registration_start","idkg_dealing_encryption_pk","idkg_key_rotation_period_ms","idle_cycles_burned_per_day","idp_canister_ids","ignored_utxo","ii_canister","ii_canister_id","im_canister","img","inProgressTtl","in_flight_commands","inc","inc_a","inc_b","inc_read","incident_id","include_all_manage_neuron_proposals","include_ballots_by_caller","include_empty_neurons_readable_by_caller","include_neurons_readable_by_caller","include_public_neurons_in_full_neurons","include_reward_status","include_status","include_topic_filtering","include_topics","increment","increment_array","index","index_canister_id","index_compressed_wasm_hash","index_id","index_principal","index_wasm_hash","info","ingress_bytes_per_block_soft_cap","init","init_arg","init_salt","initial_balances","initial_cycles","initial_neurons_fund_participation","initial_notary_delay_millis","initial_reward_rate","initial_reward_rate_basis_points","initial_supply","initial_swap_amount_e8s","initial_token_distribution","initial_values","initial_voting_period_seconds","inject_prune_event","input","insert","insert_upgrade_path_entries","install_chunked_code","install_code","install_mode","installed_wasm_hash","instances","instructions","intended_neurons_fund_participation_icp_e8s","intercept_icp_e8s","invalid","invalid_metadata","invalid_user_amount","investor","ip_addr","ipv4_config","ipv4_prefixes","ipv6","ipv6_prefixes","is2fa_enabled","isApprovedForAllDip721","isMyself","is_address_blocked","is_advanced_automatically","is_aliased","is_authorized","is_auto_finalize_enabled","is_capped","is_critical","is_custodian","is_eligible_for_rewards","is_finalizing_disburse_maturity","is_halted","is_iframe_allowed","is_item_processed","is_ledger_ready","is_nft_storage","is_redacted","is_seeded","is_trusted","is_whitelisted","is_whitelisted_for_forwarding","iso_codes","iss","issuer","issuer_id_alias_credential","issuer_id_alias_jwt","joined_community_fund_timestamp_seconds","key","key_config","key_configs","key_id","key_ids","key_pair","key_type","key_val_data","keys","kid","kind","known_neuron_data","known_neurons","kty","kyc_verified","kyt_fee","kyt_principal","kyt_provider","label","lambda","lambda_url","language","last","lastAccess","lastAnalyzedMessageTimeNanos","lastTimeNanos","last_authentication","last_block","last_deposit_with_subaccount_scraped_block_number","last_erc20_scraped_block_number","last_eth_scraped_block_number","last_gas_fee_estimate","last_ledger_block_timestamp","last_observed_block_number","last_purged_notification","last_reset_timestamp_seconds","last_scraped_block_number","last_spawned_timestamp_seconds","last_successful_fetch","last_usage","last_usage_timestamp","last_used","latest_delegation_origins","latest_reward_event","latest_round_available_e8s_equivalent","latest_tally","leaf","ledger","ledger_archive_canister_summaries","ledger_burn_index","ledger_canister_id","ledger_canister_summary","ledger_compressed_wasm_hash","ledger_id","ledger_index_canister_summary","ledger_init_arg","ledger_parameters","ledger_suite_orchestrator_id","ledger_suite_version","ledger_wasm_hash","left","len","length","level","lifecycle","limit","limit_stable_memory_page","lines","lines_per_page","list","listAllowedPrincipals","listGiftcards","listRegistrations","listTasks","list_accounts","list_addresses","list_authorized","list_community_fund_participants","list_deployed_snses","list_direct_participants","list_known_neurons","list_managed_canisters","list_nervous_system_functions","list_neurons","list_node_provider_rewards","list_node_providers","list_permitted","list_proposals","list_sns_canisters","list_sns_neuron_recipes","list_subaccounts","list_topics","list_upgrade_steps","log_index","log_length","log_visibility","logo","logoDip721","logo_type","lookup","main","maintainers","make_struct","make_struct2","making_sns_proposal","manage_dapp_canister_settings","manage_ledger_suites","manage_neuron","manage_permissions","managed_canisters","managed_pre_existing_ledger_suites","managementTaskInterval","mark_failed_at_seconds","maturity_disbursements_in_progress","maturity_e8s","maturity_e8s_equivalent","maturity_e8s_equivalent_buckets","maturity_equivalent_icp_e8s","maturity_modulation","maturity_modulation_disabled","maturity_modulation_last_updated_at_timestamp_seconds","max","max_age","max_age_bonus_percentage","max_amount_icp_e8s_included","max_artifact_streams_per_peer","max_batches","max_block_payload_size","max_bytes","max_chunk_size","max_chunk_wait_ms","max_chunks","max_clock_skew","max_direct_participation_icp_e8s","max_dissolve_delay_bonus_percentage","max_dissolve_delay_seconds","max_duplicity","max_entries_per_call","max_fee","max_fee_per_gas","max_followees_per_function","max_icp_e8s","max_inflight_captchas","max_ingress_bytes_per_message","max_ingress_messages_per_block","max_iterations","max_memo_length","max_memory_size_bytes","max_message_size_bytes","max_neuron_age_for_age_bonus","max_neuron_age_seconds_for_age_bonus","max_neurons_fund_participation_icp_e8s","max_neurons_fund_swap_participation_icp_e8s","max_num_latest_delegation_origins","max_number_of_canisters","max_number_of_neurons","max_number_of_principals_per_neuron","max_number_of_proposals_with_ballots","max_participant_icp_e8s","max_priority_fee_per_gas","max_proposals_to_keep_per_action","max_proposals_to_keep_per_topic","max_queue_size","max_response_bytes","max_results","max_rewardable_nodes","max_theoretical_neurons_fund_participation_amount_xdr","max_time_in_queue_nanos","max_tokens","max_transaction_fee","max_transactions_per_response","max_unsolved_captchas","maximum_direct_participation_icp","maximum_icp","maximum_icp_xdr_rate","maximum_node_provider_rewards_e8s","maximum_number_of_accounts","maximum_participant_icp","member_threshold","members","memo","memory_allocation","memory_size","merge_init_args","merged_maturity_e8s","merkle_root_hash","message","messageContains","messageRegex","message_hash","messages","messagesInfo","metadata","metadata_desc","metadata_keys","method","method_name","metrics","migrate_canisters","migration_trace","migrations","min","min_amount_icp_e8s_included","min_confirmations","min_direct_participation_icp_e8s","min_direct_participation_threshold_icp_e8s","min_icp_e8s","min_participant_icp_e8s","min_participants","minimum_direct_participation_icp","minimum_icp","minimum_icp_xdr_rate","minimum_participant_icp","minimum_participants","minimum_withdrawal_amount","minimum_xdr_permyriad_per_icp","minimum_yes_proportion_of_exercised","minimum_yes_proportion_of_total","mint","mintDip721","mint_block_index","mint_tokens","mint_txid","minted","minted_amount","minter_address","minter_id","minting_account","minting_account_id","mode","modified","modified_date","module_arg","module_hash","more_controller_ids","most_recent_monthly_node_provider_rewards","motion_text","n","name","nameDip721","nanos","native_functions","network","network_topology","neuron_attributes","neuron_basket_construction_parameters","neuron_claimer_permissions","neuron_fees_e8s","neuron_grantable_permissions","neuron_id","neuron_id_or_subaccount","neuron_ids","neuron_indexes_migration","neuron_infos","neuron_management_fee_per_proposal_e8s","neuron_management_voting_period_seconds","neuron_maximum_age_bonus","neuron_maximum_age_for_age_bonus","neuron_maximum_dissolve_delay","neuron_maximum_dissolve_delay_bonus","neuron_minimum_dissolve_delay_to_vote","neuron_minimum_dissolve_delay_to_vote_seconds","neuron_minimum_stake","neuron_minimum_stake_e8s","neuron_recipes","neuron_spawn_dissolve_delay_seconds","neuron_stake_e8s","neuron_subaccounts","neuron_type","neurons","neurons_fund_audit_info","neurons_fund_data","neurons_fund_economics","neurons_fund_investment_icp","neurons_fund_matched_funding_curve_coefficients","neurons_fund_neuron_portions","neurons_fund_neurons_count","neurons_fund_participation","neurons_fund_participation_constraints","neurons_fund_participation_icp_e8s","neurons_fund_refunds","neurons_fund_reserves","neurons_fund_total_active_neurons","neurons_with_invalid_stake_count","neurons_with_less_than_6_months_dissolve_delay_count","neurons_with_less_than_6_months_dissolve_delay_e8s","new_canister_wasm","new_captcha_png_base64","new_controller","new_controllers","new_device","new_entries","new_hot_key","new_maturity_e8s","new_method","new_sale_ticket","new_stake_e8s","new_target","new_target_version","new_txid","new_values","next","next_page","next_step","next_ticket_id","next_token","next_transaction_nonce","next_version","ni_dkg_dealing_encryption_pk","nns_controlled_dapp_canisters","nns_function","nns_governance_canister_id","nns_neuron_controller","nns_neuron_hotkeys","nns_neuron_id","nns_proposal_id","no","node_allowance","node_id","node_ids","node_ids_add","node_ids_remove","node_max_memory_size_bytes","node_metrics","node_metrics_history","node_metrics_history_proxy","node_operator_id","node_operator_principal_id","node_operator_principals_to_remove","node_operators_to_remove","node_provider","node_provider_id","node_provider_principal_id","node_providers","node_reward_type","node_signing_pk","non_self_authenticating_controller_neuron_subset_metrics","nonce","not_dissolving_neurons_count","not_dissolving_neurons_count_buckets","not_dissolving_neurons_e8s_buckets","not_dissolving_neurons_e8s_buckets_ect","not_dissolving_neurons_e8s_buckets_seed","not_dissolving_neurons_staked_maturity_e8s_equivalent_buckets","not_dissolving_neurons_staked_maturity_e8s_equivalent_sum","not_for_profit","notify_create_canister","notify_dfx","notify_mint_cycles","notify_payment_failure","notify_top_up","num_block_failures_total","num_blocks_proposed_total","num_blocks_synced","num_blocks_to_archive","num_blocks_total","num_calls_total","num_instructions_total","num_recently_submitted_proposals","num_requested_changes","num_subnet_nodes","number_of_entries","o","of_principal","offset","ok","old_device","old_target_version","old_txid","oldest_tx_id","omit_large_fields","onDIP721Received","one_third_participation_milestone_xdr","oob","open_sns_token_swap_proposal_id","open_time_window","openid_credential_add","openid_credential_remove","openid_credentials","openid_google","operation","operation_type","operations","operator","origin","original_total_community_fund_maturity_e8s_equivalent","outpoint","owned_nfts","owner","ownerOfDip721","p","p2p_flow_endpoints","p2pkh","p2sh","p2tr_v1","p2wpkh_v0","p2wsh_v0","page","page_number","page_size","pages","pair","parallel_calls","parameters","params","parent_hash","participant","participant_id","participants","participation","pause_account_creation","payload","payload_size_bytes","payload_text_rendering","payment","peekTask","pending_utxos","pending_version","percentage_to_disburse","percentage_to_merge","percentage_to_spawn","percentage_to_stake","permission","permission_type","permissions","permissions_to_add","permissions_to_remove","persona_id","persona_name","personas","pfn_evaluation_period_ms","phone","phone_notifications","phone_number","placeOrder","png_base64","policies","policy_id","policy_type","polling_interval_ns","ports","positions","possibility","potential_voting_power","potential_voting_power_buckets","pre_signatures_to_create_in_advance","preferences","prefix_length","prepare","prepareDelegation","prepare_canister_migration","prepare_credential","prepare_delegation","prepare_id_alias","prepared_context","pretty_version","prev_spender","previous_total_stake_e8s","princ","principal_id","principals","private_key_encrypted","process_all_items_with_panicking_callback","process_single_item_with_panicking_callback","produceId","produce_id","profiling","progress","prometheus_metrics_endpoint","proposal","proposal_creation_timestamp_seconds","proposal_id","proposal_info","proposal_initial_voting_period","proposal_reject_cost_e8s","proposal_rejection_fee","proposal_submission_deposit","proposal_timestamp_seconds","proposal_vote_threshold","proposal_wait_for_quiet_deadline_increase","proposals","propose_commit_batch","proposer","proposer_id","protection","provider","provisional_create_canister_with_cycles","provisional_top_up_canister","prune_events_if_necessary","pubKey","pub_key","pubkey","public_ipv4_config","public_key","public_neuron_subset_metrics","purge_old_tickets_last_completion_timestamp_nanoseconds","purge_old_tickets_next_principal","purpose","push_utxo_to_address","quadruples_to_create_in_advance","quantity","queryGreet","query_blocks","query_encoded_blocks","query_stats","queueTask","quote_asset","quote_asset_num_queried_sources","quote_asset_num_received_rates","rand_seed","ranges","rate","raw_rand","raw_transaction","read","readFloat","read_access_points","read_applications","read_personas","read_state","reason","reassigned_canister_ranges","receive_check_cache_size","received","received_at","received_utxos","receiver","recent_ballots","recent_changes","recipient","recipient_address","recover_subnet","recovery_authn_methods","recovery_credentials","recovery_phrases","reference_rate_sampling_interval_s","reflexive_transitive_controllers","refresh_buyer_tokens","refresh_cached_upgrade_steps","refreshed_neuron_id","refund","refund_amount","refundable","regenerate_now","region","register","register_anchor","register_dapp_canister","register_dapp_canisters","register_device","register_policy","register_rate_limit","register_transaction","register_vault","register_wallet","registered","registrationExpirationTtl","registry_poll_period_ms","registry_polling_interval_secs","registry_polling_period_secs","registry_store_uri","registry_version","regtest","reimbursed_amount","reimbursed_failed_deposit","reimbursed_in_block","reimbursement_account","reject_cost_e8s","reject_query","reject_update","rejection_code","related_origins","release_package_sha256_hex","release_package_urls","relying_party","remaining_capacity","remove","removeRegistration","removeTask","remove_access_point","remove_account","remove_account_by_principal","remove_address","remove_api_boundary_nodes","remove_controller","remove_cycles_add","remove_device","remove_firewall_rules","remove_icrc1_canister","remove_node_directly","remove_node_operators","remove_nodes","remove_nodes_from_subnet","remove_openid_credential","remove_passkey","remove_user","remove_utxo","removed_in_version","removed_principals","removed_retrieve_btc_request","replace","replace_device","replace_icrc1_canisters","replaced_transaction","replacement_nodes","replica_version","replica_version_id","replica_version_to_elect","replica_versions_to_unelect","reply_or_defer","request","request_payload_bytes_total","requested_index","requested_setting_for_auto_stake_maturity","requested_timestamp_seconds","requests","required_confirmations","requires_periodic_tasks","reroute_canister_ranges","reserved_cycles","reserved_cycles_limit","reserved_ids","reset","reset_mempool","reset_timers","response","response_payload_bytes_total","response_timestamp_seconds","restore_accounts","restore_aging_summary","restored_dapp_canisters","restricted_countries","result","retransmission_request_ms","retries_left","retrieve_blocks_from_ledger_interval_seconds","retrieve_btc","retrieve_btc_kyt_failed","retrieve_btc_min_amount","retrieve_btc_status","retrieve_btc_status_v2","retrieve_btc_status_v2_by_account","retrieve_btc_with_approval","retrieve_eth_status","retrieved_at_timestamp_seconds","return","return_cycles","revise_elected_guestos_versions","revise_elected_hostos_versions","revise_elected_replica_versions","revoke_permission","revoked","revoking","reward_account","reward_coefficient_percent","reward_event_end_timestamp_seconds","reward_event_round","reward_mode","reward_rate_transition_duration","reward_rate_transition_duration_seconds","reward_status","rewardable_nodes","rewards","right","rmAllowedPrincipal","role","root","rootPrincipals","root_ca_certificate","root_canister_id","root_canister_summary","root_wasm_hash","round","round_duration_seconds","rounds_since_last_distribution","rows","rp_id_alias_credential","rp_id_alias_jwt","rts_collector_instructions","rts_heap_size","rts_logical_stable_memory_size","rts_memory_size","rts_mutator_instructions","rts_reclaimed","rts_stable_memory_size","rts_total_allocation","rule_id","rule_raw","rules","runCellQuery","runCellUpdate","runCellUpdateAwait","run_batch","run_scenario","safeTransferFromDip721","safeTransferFromNotifyDip721","sale_delay_seconds","salt","salt_generation_strategy","salt_id","save_temp_stack_to_rebuild_device_index","scenario","schedule_deposit_reimbursement","schema_version","schnorr_public_key","scope","score","seconds","seconds_after_utc_midnight","secs","sections","security_settings","seed","seed_neuron_count","send","sendRequested","sendStatus","send_dfx","send_eth","send_whitelist","sender","sender_canister_version","sent_transaction","sequence_number","sequential_calls","serialized_representation","service","set","setApprovalForAllDip721","setCourierApiKey","setGoogleKeys","set_alternative_origins","set_api_key","set_asset_content","set_asset_properties","set_authorized","set_custodian","set_dapp_controllers","set_dapp_controllers_call_result","set_derivation_origin","set_fee_percentiles","set_firewall_config","set_gossip_config_to_default","set_id","set_integer","set_ipv6_to_none","set_logo","set_mode","set_mode_call_result","set_name","set_non_processed_items","set_operator","set_permissions","set_short_name","set_symbol","set_tip_height","settings","settle_community_fund_participation","settle_community_fund_participation_result","settle_neurons_fund_participation","settle_neurons_fund_participation_result","settled_proposals","setup_callee","sev_enabled","sha256","short_voting_period_seconds","should_auto_finalize","show","showGiftcard","sign","sign_with_ecdsa","sign_with_schnorr","signature","signature_request_timeout_ns","signed_delegation","signed_id_alias","signer","simulate_manage_neuron","skip_pre_upgrade","skip_stopping_before_installing","skipped","slope_denominator","slope_numerator","smart_contract_address","sns","sns_controlled_dapp_canisters","sns_governance_canister_id","sns_init_payload","sns_initialization_parameters","sns_ledger_canister_id","sns_metadata","sns_neuron_recipes","sns_root_canister_id","sns_subnet_ids","sns_subnet_ids_to_add","sns_subnet_ids_to_remove","sns_token_e8s","sns_token_swap_lifecycle","sns_tokens_per_icp","solution","source_amount","source_ledger","source_neuron","source_neuron_id","source_neuron_info","source_nns_neuron_id","source_principal_id","source_subnet","space_available","space_required","spawn_at_timestamp_seconds","spawning_neurons","specified_id","spender","spender_subaccount","ssh_backup_access","ssh_readonly_access","ssh_readonly_keys","stable_memory_size","stable_oob","stage","stake","stake_e8s","staked_e8s_buckets","staked_maturity_e8s","staked_maturity_e8s_equivalent","staked_maturity_e8s_equivalent_buckets","standard_deviation","start","start_as_nns","start_at_timestamp_nanos","start_canister","start_page_at","start_reducing_voting_power_after_seconds","start_time","start_timestamp_seconds","starting_at","state","state_hash","stats","status","status_code","status_text","steps","stop","stop_before_installing","stop_canister","stop_or_start_nns_canister","stop_upgrade_start","storage_layout_version","store","store_accounts","store_canister","store_canister_id","store_icrc1_canister","store_member","store_new_icrc1_canisters","store_passkey","store_transaction","stored_chunks","streaming_strategy","sub","subaccount","submit_ciphertexts","submit_proposal","submitted_at","subnet","subnet_id","subnet_id_override","subnet_selection","subnet_type","subtype","success","successfully_transferred_neurons","summary","superpowers","supportedInterfacesDip721","supported_ckerc20_tokens","suspended_utxo","suspended_utxos","swap","swap_background_information","swap_canister_id","swap_canister_summary","swap_distribution","swap_due_timestamp_seconds","swap_neurons","swap_parameters","swap_participation_limits","swap_provider","swap_start_timestamp_seconds","swap_wasm_hash","sweep_icp_result","sweep_sns_result","symbol","symbolDip721","symmetric_key_verification_key_for_note","sync_controllers","sync_recovery_phrase_from_internet_identity","system_params","take","take_ownership","target_amount","target_canister","target_canister_id","target_ledger","target_method_name","target_neuron","target_neuron_info","target_subnet_id","target_swap_canister_id","target_version","targets","tentative_device","test","testflight","threshold_pct","threshold_policy","ticket","ticket_id","time","timeMillis","timeNanos","time_ns","time_per_token_ns","time_window_seconds","timers","timestamp","timestamp_nanos","timestamp_of_disbursement_seconds","timestamp_seconds","tip_block_hash","tip_height","title","to","toAmount","to_account","to_account_identifier","to_canister","to_claim_transfers","to_direct_participation_icp_e8s","to_principal","to_spender","to_subaccount","toggle_trap","token","tokenTransferNotification","token_created","token_id","token_logo","token_name","token_refresh_ttl","token_symbol","token_ttl","tokens","top","topic","topic_followee_index","topic_followees","topic_following","topic_id_to_followees","topics","total","totalSupplyDip721","total_available_e8s_equivalent","total_deciding_voting_power","total_direct_contribution_icp_e8s","total_direct_participation_icp_e8s","total_e8s","total_length","total_locked_e8s","total_maturity_e8s_equivalent","total_maturity_equivalent_icp_e8s","total_neurons_fund_contribution_icp_e8s","total_neurons_fund_participation_icp_e8s","total_num_changes","total_pages_available","total_potential_voting_power","total_staked_e8s","total_staked_e8s_ect","total_staked_e8s_non_self_authenticating_controller","total_staked_e8s_seed","total_staked_maturity_e8s_equivalent","total_staked_maturity_e8s_equivalent_ect","total_staked_maturity_e8s_equivalent_seed","total_supply_governance_tokens","total_supply_icp","total_voting_power","total_voting_power_non_self_authenticating_controller","track_localhost","transaction","transaction_count","transaction_fee","transaction_fee_e8s","transaction_hash","transaction_id","transaction_receipt","transaction_type","transaction_window","transactions","transfer","transferFromDip721","transferFromNotifyDip721","transfer_block_height","transfer_fee","transfer_fee_paid_e8s","transfer_gtc_neuron","transfer_id","transfer_nfid_id","transfer_start_timestamp_seconds","transfer_success_timestamp_seconds","transfer_timestamp","transform","transform1","transform2","transform3","transport_public_key","transport_tls_cert","trap_query","trap_update","treasury_distribution","tree","trigger_threshold","truckType","trusted_origins","tuple","txid","txid_to_bytes","uid","uncategorized_functions","uninstall_code","unit_delay_millis","unreachable","unset_asset_content","upToTimeNanos","update","updateCalls","updateMerchant","updateRegistration","update_2fa","update_access_point","update_account","update_allowed_principals","update_allowed_principals_result","update_alternative_origins","update_api_boundary_nodes_version","update_balance","update_canister_list","update_canister_settings","update_device","update_elected_hostos_versions","update_firewall_rules","update_neuron","update_node_directly","update_node_domain_directly","update_node_ipv4_config_directly","update_node_operator_config","update_node_operator_config_directly","update_node_provider","update_node_rewards_table","update_nodes_hostos_version","update_note","update_period","update_policy","update_settings","update_sns_subnet_list","update_ssh_readonly_access_for_all_unassigned_nodes","update_subnet","update_system_params","update_trusted_origins","update_trusted_origins_raw","update_unassigned_nodes_config","update_vault","update_wallet","updated_at_timestamp_seconds","upgrade","upgrade_journal","upgrade_journal_entry_count","upgrade_path","upgrade_root","upgrade_root_settings","upgrade_steps","uploadCertificate","upload_chunk","upload_index_wasm","upload_worker_wasm","url","use","use_access_point","use_registry_derived_rewards","user","userAge","userName","userPublicKey","user_id","user_limit","user_name","user_number","user_preferences","user_uuid","users","users_registered","utc_offset_minutes","utxo","utxos","uuid","v0","val","validate_commit_proposed_batch","validate_configure","validate_grant_permission","validate_revoke_permission","validate_take_ownership","validator_canister_id","validator_method_name","valuation","valuation_factors","value","vault","vault_id","vaults","vc_consent_message","verification_code","verify","verify_tentative_device","version","vesting_period","vesting_period_seconds","vetkd_derive_key","vetkd_public_key","visibility","vote","voters","votes_no","votes_yes","voting_power","voting_power_buckets","voting_power_economics","voting_power_percentage_multiplier","voting_power_refreshed_timestamp_seconds","voting_reward_parameters","voting_rewards_parameters","vout","wait","wait_for_quiet_deadline_increase_seconds","wait_for_quiet_state","wait_for_quiet_threshold_seconds","wallet","wallet_api_version","wallet_balance","wallet_balance128","wallet_call","wallet_call128","wallet_call_with_max_cycles","wallet_create_canister","wallet_create_canister128","wallet_create_wallet","wallet_create_wallet128","wallet_id","wallet_receive","wallet_send","wallet_send128","wallet_store_wallet_wasm","wallets","wasm","wasm_memory_limit","wasm_memory_threshold","wasm_module","wasm_module_hash","wasm_module_size","webauthn","which_am_i","whitelisted_canisters","whitelisted_phone_numbers","whoami","whoami_query","whois","withdraw","withdraw_erc20","withdraw_eth","withdrawal_amount","withdrawal_id","withdrawal_status","witness","write","write_entry","wrong_code","xdr_conversion_rate","xdr_permyriad_per_icp","xdr_permyriad_per_node_per_month","xdrs_per_icp","xnet_endpoint","xrc_id","yes"],fe=ue(Ie);var Y=(t,e)=>JSON.stringify(t,Be,e),Be=(t,e)=>typeof e=="bigint"?e.toString():e;document.addEventListener("DOMContentLoaded",()=>{let t=document.getElementById("unifiedInput"),e=document.getElementById("hexOutput"),n=document.getElementById("escapedStringOutput"),r=document.getElementById("base64Output"),i=document.getElementById("arrayOutput"),o=document.getElementById("hexArrayOutput"),_=document.getElementById("resultContainer");function d(c){if(!c.value)return;let s=document.getElementById(`${c.id}-feedback`);navigator.clipboard.writeText(c.value).then(()=>{c.classList.add("copied"),s&&(s.textContent="Copied!"),setTimeout(()=>{c.classList.remove("copied"),s&&(s.textContent="")},1500)}).catch(a=>{console.error("Failed to copy text: ",a),s&&(s.textContent="Failed to copy!"),setTimeout(()=>{s&&(s.textContent="")},2e3)})}function p(c){let s="",a=new TextEncoder;for(let f=0;f<c.length;f++){let y=c[f];if(y==="\\"&&f+2<c.length){let g=c.substring(f+1,f+3);if(/^[0-9a-fA-F]{2}$/.test(g))s+=g.toUpperCase(),f+=2;else{let w=a.encode(y);for(let W of w)s+=W.toString(16).padStart(2,"0").toUpperCase()}}else{let g=a.encode(y);for(let w of g)s+=w.toString(16).padStart(2,"0").toUpperCase()}}return s}function m(c){let s="";for(let a=0;a<c.length;a+=2){let f=parseInt(c.substring(a,a+2),16);f>=32&&f<=126&&f!==92?s+=String.fromCharCode(f):s+=`\\${f.toString(16).padStart(2,"0").toLowerCase()}`}return s}function h(c){if(c.length===0)return"";let s=new Uint8Array(c.length/2);for(let a=0;a<c.length;a+=2)s[a/2]=parseInt(c.substring(a,a+2),16);return btoa(String.fromCharCode(...s))}function u(c){if(c.length===0)return"[]";let s=[];for(let a=0;a<c.length;a+=2)s.push(parseInt(c.substring(a,a+2),16));return`[${s.join(", ")}]`}function v(c){if(c.length===0)return"[]";let s=[];for(let a=0;a<c.length;a+=2)s.push("0x"+c.substring(a,a+2).toUpperCase());return`[${s.join(", ")}]`}function k(c){if(c.length===0)return"";try{let s=atob(c),a="";for(let f=0;f<s.length;f++){let y=s.charCodeAt(f);a+=y.toString(16).padStart(2,"0").toUpperCase()}return a}catch(s){return console.error("Invalid Base64 string:",s),""}}function S(c){let s=c.trim();if(s.length===0)return null;if(s.startsWith("[")&&s.endsWith("]"))try{let f=s.substring(1,s.length-1).split(",").map(g=>g.trim()),y="";for(let g of f){if(g.length===0)continue;let w;if(g.startsWith("0x")||g.startsWith("0X")?w=parseInt(g.substring(2),16):w=parseInt(g,10),isNaN(w)||w<0||w>255)throw new Error(`Invalid byte value in array: ${g}`);y+=w.toString(16).padStart(2,"0").toUpperCase()}return y}catch(a){return console.error("Error parsing array input:",a),null}if(/^[0-9a-fA-F]+$/.test(s)&&s.length%2===0){try{atob(s).length>0&&s.length%4}catch{}return s.toUpperCase()}if(s.startsWith("DIDL")||s.includes("\\"))return p(s);if(/^[A-Za-z0-9+/=]+$/.test(s)&&s.length%4===0)try{let a=k(s);if(a.length>0)return a}catch{}return null}function A(c){let s=null,a=null,f=null;if(_.innerHTML="",c.trim().length===0){q();return}try{a=S(c),a===null?f="Unrecognized input format. Please enter valid Hex, Escaped String, or Base64.":a.length%2!==0?f="Hex string has an odd number of characters. Each byte requires two hex characters.":/^[0-9a-fA-F]*$/.test(a)||(f="Invalid hex characters detected after conversion.")}catch(y){f=`Error during input conversion: ${y.message||y}`}if(f){R(f);return}if(a)e.value=a,n.value=m(a),r.value=h(a),i.value=u(a),o.value=v(a);else{R("Could not convert input to a valid hex format for decoding.");return}try{let y=new Uint8Array(a.length/2);for(let g=0;g<a.length;g+=2){let w=parseInt(a.substring(g,g+2),16);if(isNaN(w)){s={error:{msg:`Invalid hex character sequence at position ${g}. Please use only 0-9, a-f, A-F.`,index:g/2}},L(s);return}y[g/2]=w}s=pe(y,fe),L(s)}catch(y){s={error:{msg:`An unexpected JavaScript error occurred in the UI: ${y instanceof Error?y.message:"An unknown error occurred in the UI logic."}`,index:0}},L(s)}}function R(c){_.innerHTML="";let s=document.createElement("div");s.className="bg-red-100 border border-red-400 text-red-700 px-6 py-4 rounded-lg relative shadow-inner",s.innerHTML=`
          <strong class="font-bold">Error!</strong>
          <span class="block sm:inline ml-2">${c}</span>
      `,_.appendChild(s)}function q(){_.innerHTML="";let c=document.createElement("div");c.className="bg-blue-100 border border-blue-400 text-blue-700 px-6 py-4 rounded-lg relative shadow-inner",c.innerHTML=`
          <p class="text-center">Enter data (Hex, Escaped String, or Base64) to see the decoding result and conversions.</p>
      `,_.appendChild(c)}function L(c){if(_.innerHTML="","error"in c){let s=document.createElement("div");if(s.className="bg-red-100 border border-red-400 text-red-700 px-6 py-4 rounded-lg relative shadow-inner",s.innerHTML=`
                <strong class="font-bold">Error!</strong>
                <span class="block sm:inline ml-2">${c.error.msg}</span>
                ${c.error.index!==null?`<p class="mt-3 text-sm">Error occurred at byte index: <code class="font-mono bg-red-200 px-2 py-1 rounded-md text-red-800">${c.error.index}</code></p>`:""}
            `,c.error.data!==void 0){let a=document.createElement("p");a.className="mt-4 font-semibold text-red-800",a.textContent="Partial Decoded Data (if any):",s.appendChild(a);let f=document.createElement("pre");f.className="bg-red-50 p-4 rounded-lg mt-2 text-sm overflow-auto max-h-60 border border-red-200",f.textContent=Y(c.error.data,2),s.appendChild(f)}_.appendChild(s)}else if("ok"in c){let s=document.createElement("div");s.className="bg-green-100 border border-green-400 text-green-700 px-6 py-4 rounded-lg relative shadow-inner",s.innerHTML=`
                <strong class="font-bold">Success!</strong>
                <span class="block sm:inline ml-2">Candid data successfully decoded.</span>
                <p class="mt-4 font-semibold text-green-800">Decoded JSON:</p>
            `;let a=document.createElement("pre");a.className="bg-green-50 p-4 rounded-lg mt-2 text-sm overflow-auto max-h-96 border border-green-200",a.textContent=Y(c.ok,2),s.appendChild(a),_.appendChild(s)}}t.addEventListener("input",()=>{A(t.value)}),e.addEventListener("click",()=>d(e)),n.addEventListener("click",()=>d(n)),r.addEventListener("click",()=>d(r)),i.addEventListener("click",()=>d(i)),o.addEventListener("click",()=>d(o)),t.value?A(t.value):q()});})();
/*! Bundled license information:

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=candid.js.map
